;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Test waitForEvents callback v1.0 21-Jul-2017
; Exercise the waitForEvents command.  We're called by other scripts.  This script runs as a callback
; when the waitForEvents thread processes a response.
; - confirm that commands report invalidState when called before createSession
; - confirm that createSession succeeds, and contains all required properties
; - confirm that createSession reports busy now, and others report invalidState
;
; Arguments
; arg:1 - test to run
; arg:2 - [REF] variable to set with the result
; arg:3 - timeout in milliseconds
;
; Locals
; (none)
;
; returns: pass or fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We don't have a banner, because we're called from other scripts...
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Dispatch the test...
;
if '${arg:1}' == 'checkinvalidsessionid' goto CHECKINVALIDSESSIONID
echopassfail 'event waitForEvents - ${arg:1}' 'fail (no test specified)'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CHECKINVALIDSESSIONID
;
:CHECKINVALIDSESSIONID
;
; Now that we're in the callback, assume we'll pass...
set '${arg:2}' 'pass'
;
; Analyze the result...
call CHECK 'TL.NSCN.WAIT.001' 'kind'
call CHECK 'TL.NSCN.WAIT.002' 'commandId'
call CHECK 'TL.NSCN.WAIT.003' 'method' '==' 'waitForEvents'
call CHECK 'TL.NSCN.WAIT.004' 'results'
call CHECK 'TL.NSCN.WAIT.005' 'results.success' '==' 'false'
call CHECK 'TL.NSCN.WAIT.006' 'results.code' == 'invalidSessionId'
if '${get:${arg:2}}' != 'pass' goto CHECKINVALIDSESSIONID.FAIL
;
; We're good...
return 'pass'
;
; We're not good...
:CHECKINVALIDSESSIONID.FAIL
set '${arg:2}' 'fail'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CHECK
; arg:1 - title of the test
; arg:2 - property
; arg:3 - if-statement operator (optional)
; arg:4 - value to check for if arg2 is specified
; returns pass or fail
;
:CHECK
;
; Make sure the property exists...
if '${ejx:${arg:2}}' == '(null)' goto CHECK.MISSING
;
; If we have no operator, we're done...
if '${arg:3}' == '' goto CHECK.PASS
;
; Do the if-statement...
if '${ej:${arg:2}}' '${arg:3}' '${arg:4}' goto CHECK.PASS
;
; The if-statement failed...
echopassfail '${arg:1}: event check ${arg:2}' 'fail (if '<${ej:${arg:2}}>' '${arg:3}' '<${arg:4}>')'
set '${arg:3}' 'fail'
return 'fail'
;
; The property is missing...
:CHECK.MISSING
echopassfail '${arg:1}: event check ${arg:2}' 'fail (${arg:2} missing)'
set '${arg:3}' 'fail'
return 'fail'
;
; We're good...
:CHECK.PASS
echopassfail '${arg:1}: event check ${arg:2}' 'pass'
return 'pass'