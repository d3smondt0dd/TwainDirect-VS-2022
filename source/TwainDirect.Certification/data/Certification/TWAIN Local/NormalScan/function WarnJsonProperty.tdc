;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Warn Property v1.0 11-Deb-2020
; Check that the specified JSON property passes the test(s). If the
; property is the only thing specified, we just check if it exists.
; If an if-statement operator is included, then we also check it
; against one or more values.
;
; We'll only issue a warning if something bad happens...
;
; Arguments
; arg:1 - title for this test
; arg:2 - [REF] status (only set to fail, if needed)
; arg:3 - property to check
; arg:4 - if-statement operation to perform
; arg:5 - first item to check against the operation
; arg:n - arguments repeat as needed
;
; Locals
; checkproperty.aa - argument counter
;
; returns pass or fail

;
; Make sure the property exists...
if '${rjx:${arg:3}}' == '(null)' goto CHECK.MISSING
;
; If we have no operator, we're done...
if '${arg:4}' == '' goto CHECK.PASS
;
; Do the if-statement (init at 4, we'll start at 5), we are
; successful if we find an item, unsuccessful if we exhaust
; the list without finding a match...
set checkproperty.aa 4
:CHECK.NEXTIF
	increment checkproperty.aa ${get:checkproperty.aa} 1
	if '${get:checkproperty.aa}' > '${arg:#}' goto CHECK.FAILEDIF
	if '${rj:${arg:3}}' '${arg:4}' '${arg:${get:checkproperty.aa}}' goto CHECK.PASS
	goto CHECK.NEXTIF
;
; An if-statement failed...
:CHECK.FAILEDIF
echopassfail '${arg:1}: check ${arg:3}' 'fail (if <${rj:${arg:3}}> ${arg:4} <${arg:5}> <${arg:6}> <${arg:7}>)'
set '${arg:2}' 'fail'
return 'fail'
;
; The property is missing...
:CHECK.MISSING
echopassfail '${arg:1}: ${arg:3}' 'warn (${arg:3} missing, should be in TWAIN Direct 1.2 and higher)'
set '${arg:2}' 'pass'
return 'pass'
;
; We're good...
:CHECK.PASS
echopassfail '${arg:1}: ${arg:3}' 'pass'
return 'pass'
