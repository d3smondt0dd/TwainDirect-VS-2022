;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; PaperJam
; arg:1 - scanner to use
; arg:2 - task (optional)
; returns: pass or fail
;
; Scan looking for a paperJam error, this is to confirm that
; the scanner correctly reports paperJam's when they happen.
; If the scanner is incapable of experiencing a paperJam, this
; test may be skipped.
;
; We're looking for the paperJam to first show up as an event
; responding to waitForEvents and then we'll confirm that
; getSession also sees it.
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Display the banner...
;
echo.yellow
echo.yellow
echo.yellow
echo.yellow '********************************************************************************'
echo.yellow 'PaperJam v1.0 15-Sep-2017'
set paperjamgetsessionresult 'pass'
set paperjamwaitforeventsresult 'fail'
set paperjamwaitforeventssyntaxresult 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Instructions to the user...
;
echo.yellow
echo.yellow
echo.yellow
echo.yellow 'This test monitors for a paper jam.  A paper jam occurs with an automatic'
echo.yellow 'document feeder when the paper is unable to move completely through the'
echo.yellow 'scanner transport.'
echo.yellow
echo.yellow 'The test will be skipped if the Certification Tool cannot confirm that the'
echo.yellow 'scanner has a feeder.'
echo.yellow
echo.yellow 'When ready, type "y" and press the Enter key.'
echo.yellow
input 'Is the scanner ready with paper in the feeder? ' 'Y' 'A'
if '${ret:}' ~~ 'A' goto MAIN.FAIL
echo


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Pick a scanner...
;
select '${arg:1}'
if '${ret:}' != 'true' goto MAIN.FAIL



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get the scanner info, including its x-privet-token...
;
infoex
if '${rj:x-privet-token}' == '' goto MAIN.FAIL
echopassfail 'TL.PJAM.INFX.001' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Create a new session...
;
createSession
if '${rj:results.success}' != 'true' goto MAIN.FAIL
if '${rj:results.session.state}' != 'ready' goto MAIN.FAIL
echopassfail 'TL.PJAM.CREA.001' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Wait for events, we're passing in the test we want to
; perform, and the variable we want to be set when it's
; complete.  We need two result variables, because we
; need to make sure the waitForSession content is correctly
; constructed...
;
waitForEvents 'test waitForEvents' 'paperjam' 'paperjamwaitforeventsresult' 'paperjamwaitforeventssyntaxresult'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Send a task...
;
set task '${arg:2}'
if '${get:task}' != '' goto MAIN.SENDTASK
set task '{"actions":[{"action":"configure","streams":[{"sources":[{"source":"any"}]}]}]}'
:MAIN.SENDTASK
sendTask '${get:task}'
if '${rj:results.success}' != 'true' goto MAIN.FAIL
echopassfail 'TL.PJAM.STSK.001' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start capturing images...
;
startCapturing
if '${rj:results.success}' != 'true' goto MAIN.FAIL
if '${rj:results.session.state}' != 'capturing' goto MAIN.FAIL
echopassfail 'TL.PJAM.STRT.001' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Scan until the scanner stops giving us images...
;
; Loop here until we see an image, or scanning ends...
:MAIN.WAIT

	; We should only wait if more images could be coming...
	if '${session:imageBlocksDrained}' == 'false' goto MAIN.WAITFORSESSIONUPDATE
	goto MAIN.DONE

	; Wait for the session object to be updated...
	:MAIN.WAITFORSESSIONUPDATE
	waitforsessionupdate 5000
	echo 'waiting...'

	; If we have an image, get it...
	set firstimageblock '${session:imageBlocks[0]}'
	if '${get:firstimageblock}' != '' goto MAIN.GETIMAGE
	goto MAIN.WAIT

goto MAIN.WAITNEXT

; Keep releasing images as long as we have some...
:MAIN.GETIMAGE

	; release the first image block...
	releaseImageBlocks '${get:firstimageblock}' '${get:firstimageblock}'
	set firstimageblock '${rj:results.session.imageBlocks[0]}'
	if '${rj:results.success}' != 'true' goto MAIN.FAIL
	if '${rj:results.session.imageBlocksDrained}' != 'false' goto MAIN.DONE
	if '${get:firstimageblock}' == '' goto MAIN.WAIT

goto MAIN.GETIMAGE
:MAIN.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get session, if we see false/paperJam, we pass...
;
getSession
call CHECK 'results.session.status.success' '==' 'false'
call CHECK 'results.session.status.detected' '==' 'paperJam'
echopassfail 'TL.PJAM.GETS.001' 'pass'


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Stop capturing images...
;
:MAIN.STOPCAPTURING
stopCapturing
echopassfail 'TL.PJAM.STOP.001' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Close the session...
;
closeSession
echopassfail 'TL.PJAM.CLOS.001' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; How did we do?
;
if '${get:paperjamgetsessionresult}' != 'pass' goto MAIN.FAILGETSESSION
if '${get:paperjamwaitforeventsresult}' != 'pass' goto MAIN.FAILWAITFOREVENTS
if '${get:paperjamwaitforeventssyntaxresult}' != 'pass' goto MAIN.FAILWAITFOREVENTSSYNTAX
echopassfail 'Summary' 'pass'
log info '#Test result:                 pass'
return 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MAIN.FAIL
;
:MAIN.FAIL
stopCapturing
closeSession
echopassfail 'Summary' 'fail (problem during scanning)'
log info '#Test result:                 fail (problem during scanning)'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MAIN.FAILGETSESSION
;
:MAIN.FAILGETSESSION
echopassfail 'Summary' 'fail (getSession did not see paperJam)'
log info '#Test result:                 fail (getSession did not see paperJam)'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MAIN.FAILWAITFOREVENTS
;
:MAIN.FAILWAITFOREVENTS
echopassfail 'Summary' 'fail (waitForEvents did not see paperJam)'
log info '#Test result:                 fail (waitForEvents did not see paperJam)'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MAIN.FAILWAITFOREVENTSSYNTAX
;
:MAIN.FAILWAITFOREVENTSSYNTAX
echopassfail 'Summary' 'fail (waitForEvents was missing fields)'
log info '#Test result:                 fail (waitForEvents was missing fields)'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CHECK
; arg1 - property
; arg2 - if-statement operator (optional)
; arg3 - value to check for if arg2 is specified
; returns pass or fail
;
:CHECK
;
; Make sure the property exists...
if '${rjx:${arg:1}}' == '(null)' goto CHECK.MISSING
;
; If we have no operator, we're done...
if '${arg:2}' == '' goto CHECK.PASS
;
; Do the if-statement...
if '${rj:${arg:1}}' '${arg:2}' '${arg:3}' goto CHECK.PASS
;
; The if-statement failed...
echopassfail 'check ${arg:1}' 'fail (if '<${rj:${arg:1}}>' '${arg:2}' '<${arg:3}>')'
set paperjamgetsessionresult 'fail'
return 'fail'
;
; The property is missing...
:CHECK.MISSING
echopassfail 'check ${arg:1}' 'fail (${arg:1} missing)'
set paperjamgetsessionresult 'fail'
return 'fail'
;
; We're good...
:CHECK.PASS
return 'pass'