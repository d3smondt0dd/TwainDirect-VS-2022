;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Test waitForEvents callback v1.0 06-Jul-2017
; arg:1 - test to run
; arg:2 - variable to set with the result
; arg:3 - variable to set if there's a syntax error
; returns: pass or fail
;
; Exercise the waitForEvents command.  We're called by other scripts.  This script runs as a callback
; when the waitForEvents thread processes a response.
;
; - confirm that we see fail/paperJam at some point
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We don't have a banner, because we're called from other scripts...
;
set waitforeventsresultname '${arg:2}'
set waitforeventssyntaxresultname '${arg:3}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Dispatch the test...
;
if '${arg:1}' == 'paperjam' goto PAPERJAM
echopassfail 'event waitForEvents - ${arg:1}' 'fail (no test specified)'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; PAPERJAM, seeing false/paperJam once is good enough
; so we assume fail until we see one.  If this call
; doesn't see what we want we 'skip' it.  This is because
; we don't want to anticipate what kind of events the
; scanner may send.  There's no reason to expect that
; over the long haul fail/paperJam will be the only one...
;
:PAPERJAM
;
; Analyze the result, we have to check all the events...
set ii 0
:PAPERJAM.EVENTSNEXT
	;
	; We've run out of events.
	if '${ej:results.events[${get:ii}]}' == '' goto PAPERJAM.EVENTSEND
	;
	; Skip timeout...
	if '${ej:results.events[${get:ii}].event}' == 'timeout' goto PAPERJAM.INCREMENT
	;
	; Critical ends us...
	if '${ej:results.events[${get:ii}].event}' == 'critical' goto PAPERJAM.FAIL
	;
	; It should be okay to skip any other non-imageBlocks event...
	if '${ej:results.events[${get:ii}].event}' != 'imageBlocks' goto PAPERJAM.INCREMENT
	;
	; We're looking for success to be false, if it's
	; missing that's a fail, if it's true we'll skip
	; this event.
	call CHECK 'results.events[${get:ii}].session.status.success' '==' 'false'
	if '${ret:}' == 'skip' goto PAPERJAM.INCREMENT
	if '${ret:}' == 'fail' goto PAPERJAM.FAIL
	;
	; We're looking for detected to be paperJam, if
	; it's missing that's a fail, if it's not paperJam
	; we'll skip this event.
	call CHECK 'results.events[${get:ii}].session.status.detected' '==' 'paperJam'
	if '${ret:}' == 'skip' goto PAPERJAM.INCREMENT
	if '${ret:}' == 'fail' goto PAPERJAM.FAIL
	if '${ret:}' == 'pass' goto PAPERJAM.PASS
	;
	; Next event.
	:PAPERJAM.INCREMENT
	increment ii '${get:ii}' 1
	goto PAPERJAM.EVENTSNEXT
:PAPERJAM.EVENTSEND
goto PAPERJAM.SKIP
;
; We're good, we found one...
:PAPERJAM.PASS
echopassfail 'TL.PJAM.WAIT.001' 'pass'
set '${get:waitforeventsresultname}' 'pass'
return 'pass'
;
; We didn't see it this time...
:PAPERJAM.SKIP
return 'skip'
;
; There's a problem in the event...
:PAPERJAM.FAIL
echopassfail 'TL.PJAM.WAIT.001' 'fail (event=${ej:results.events[${get:ii}].event})'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CHECK
; arg1 - property
; arg2 - if-statement operator (optional)
; arg3 - value to check for if arg2 is specified
; returns pass or fail
;
:CHECK
;
; Make sure the property exists...
if '${ejx:${arg:1}}' == '(null)' goto CHECK.MISSING
;
; If we have no operator, we're done...
if '${arg:2}' == '' goto CHECK.PASS
;
; Do the if-statement...
if '${ej:${arg:1}}' '${arg:2}' '${arg:3}' goto CHECK.PASS
;
; The if-statement failed, in this instance this is
; a skip...
return 'skip'
;
; The property is missing, we can't accept this, so mark
; it as a syntax error...
:CHECK.MISSING
echopassfail 'event check ${arg:1}' 'fail (${arg:1} missing)'
set '${get:waitforeventssyntaxresultname}' 'fail'
return 'fail'
;
; We're good...
:CHECK.PASS
return 'pass'