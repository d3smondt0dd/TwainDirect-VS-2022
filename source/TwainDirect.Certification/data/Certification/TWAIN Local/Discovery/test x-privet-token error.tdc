;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Test x-privet-token error
; Issue each of the valid RESTful commands and one invalid command before we have a valid x-privet-token,
; in each case the scanner must respond with an HTTP error of 400, and a payload of the following form:
; {"error":"invalid_x_privet_token","description":"X-Privet-Token missing or invalid..."}
;
; This script is not standalone, it must be issued after a scanner has been selected, but before a call
; to info or infoex.
;
; Arguments
; (none)
;
; Locals
; xprivettokenerrorresult - result for this test
;
; returns: pass or fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Send each of the commands.  We don't do waitForEvents here, because any complaint has to come back
; asynchronously, so we'll have to detect it in the events...
;
echo
echo 'Test x-privet-token error v1.0 31-Jul-2017'
set xprivettokenerrorresult 'pass'
;
; Check for a missing X-Privet_Token...
call CHECKMISSING 'TL.XPRT.MISS.001' 'createSession'
call CHECKMISSING 'TL.XPRT.MISS.002' 'getSession'
call CHECKMISSING 'TL.XPRT.MISS.003' 'sendTask' 'x'
call CHECKMISSING 'TL.XPRT.MISS.004' 'startCapturing'
call CHECKMISSING 'TL.XPRT.MISS.005' 'readImageBlockMetadata' '1' 'false'
call CHECKMISSING 'TL.XPRT.MISS.006' 'readImageBlock' '1' 'false'
call CHECKMISSING 'TL.XPRT.MISS.007' 'releaseImageBlocks' '1' '1'
call CHECKMISSING 'TL.XPRT.MISS.008' 'stopCapturing'
call CHECKMISSING 'TL.XPRT.MISS.009' 'closeSession'
call CHECKMISSING 'TL.XPRT.MISS.010' 'invalidCommand'
;
; Check for an invalid X-Privet_Token...
call CHECKINVALID 'TL.XPRT.INVD.001' 'createSession'
call CHECKINVALID 'TL.XPRT.INVD.002' 'getSession'
call CHECKINVALID 'TL.XPRT.INVD.003' 'sendTask' 'x'
call CHECKINVALID 'TL.XPRT.INVD.004' 'startCapturing'
call CHECKINVALID 'TL.XPRT.INVD.005' 'readImageBlockMetadata' '1' 'false'
call CHECKINVALID 'TL.XPRT.INVD.006' 'readImageBlock' '1' 'false'
call CHECKINVALID 'TL.XPRT.INVD.007' 'releaseImageBlocks' '1' '1'
call CHECKINVALID 'TL.XPRT.INVD.008' 'stopCapturing'
call CHECKINVALID 'TL.XPRT.INVD.009' 'closeSession'
call CHECKINVALID 'TL.XPRT.INVD.010' 'invalidCommand'
;
; Print the summary...
echopassfail 'SUMMARY' '${get:xprivettokenerrorresult}'
return '${get:xprivettokenerrorresult}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CHECKMISSING
;
; Arguments
; arg:1 - title of the test
; arg:2 - command to run
; arg:3 - argument to the command
; arg:4 - argument to the command
; arg:5 - argument to the command
;
; Locals
; checkmissing.ii - argument counter
; checkmissing.aa - argument counter
;
; returns pass or fail
;
:CHECKMISSING
;
; Log it to make it easier to diagnose stuff...
log info '#'
log info '#Test:                        ${arg:1}'
log info '#Command:                     ${arg:2}'
;
; Dump the arguments (if any)...
set checkmissing.ii 1
set checkmissing.aa 3
:CHECKMISSING.ARGLOOP
	if '${arg:${get:checkmissing.aa}}' == '' goto CHECKMISSING.ARGDONE
	log info '#arg-${get:checkmissing.ii}:                       ${arg:${get:checkmissing.aa}}'
	increment checkmissing.ii '${get:checkmissing.ii}' 1
	increment checkmissing.aa '${get:checkmissing.aa}' 1
	goto CHECKMISSING.ARGLOOP
:CHECKMISSING.ARGDONE
;
; Send the command with no X-Privet-Token...
'${arg:2}' '${arg:3}' '${arg:4}' '${arg:5}'
;
; Check the result...
if '${rsts:}' != '400' goto CHECKMISSING.FAILSTS
if '${rj:error}' != 'invalid_x_privet_token' goto CHECKMISSING.FAILERROR
if '${rj:description}' !contains 'X-Privet-Token' goto CHECKMISSING.FAILDESCRIPTION
if '${rj:description}' !contains 'missing' goto CHECKMISSING.FAILDESCRIPTION
if '${rj:description}' !contains 'invalid' goto CHECKMISSING.FAILDESCRIPTION
;
; We're good...
echopassfail '${arg:1}: x-privet-token ${arg:2}' 'pass'
log info '#Test result:                 pass'
return 'pass'
;
:CHECKMISSING.FAILSTS
echopassfail '${arg:1}: x-privet-token ${arg:2}' 'fail (http status not 400)'
log info '#Test result:                 fail (http status not 400)'
set xprivettokenerrorresult 'fail'
return 'fail'
;
:CHECKMISSING.FAILERROR
echopassfail '${arg:1}: x-privet-token ${arg:2}' 'fail (error not invalid_x_privet_token)'
log info '#Test result:                 fail (error not invalid_x_privet_token)'
set xprivettokenerrorresult 'fail'
return 'fail'
;
:CHECKMISSING.FAILDESCRIPTION
echopassfail '${arg:1}: x-privet-token ${arg:2}' 'fail (error bad description)'
log info '#Test result:                 fail (error bad description)'
set xprivettokenerrorresult 'fail'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CHECKINVALID
;
; Arguments
; arg:1 - title of the test
; arg:2 - command to run
; arg:3 - argument to the command
; arg:4 - argument to the command
; arg:5 - argument to the command
;
; Locals
; checkmissing.ii - argument counter
; checkmissing.aa - argument counter
;
; returns pass or fail
;
:CHECKINVALID
;
; Log it to make it easier to diagnose stuff...
log info '#'
log info '#Test:                        ${arg:1}'
log info '#Command:                     ${arg:2}'
;
; Dump the arguments (if any)...
set checkmissing.ii 1
set checkmissing.aa 3
:CHECKINVALID.ARGLOOP
	if '${arg:${get:checkmissing.aa}}' == '' goto CHECKINVALID.ARGDONE
	log info '#arg-${get:checkmissing.ii}:                       ${arg:${get:checkmissing.aa}}'
	increment checkmissing.ii '${get:checkmissing.ii}' 1
	increment checkmissing.aa '${get:checkmissing.aa}' 1
	goto CHECKINVALID.ARGLOOP
:CHECKINVALID.ARGDONE
;
; Send the command with a bad X-Privet_Token...
twainlocalsession create
'${arg:2}' '${arg:3}' '${arg:4}' '${arg:5}'
twainlocalsession destroy
;
; Check the result...
if '${rsts:}' != '400' goto CHECKINVALID.FAILSTS
if '${rj:error}' != 'invalid_x_privet_token' goto CHECKINVALID.FAILERROR
if '${rj:description}' !contains 'X-Privet-Token' goto CHECKINVALID.FAILDESCRIPTION
if '${rj:description}' !contains 'missing' goto CHECKINVALID.FAILDESCRIPTION
if '${rj:description}' !contains 'invalid' goto CHECKINVALID.FAILDESCRIPTION
;
; We're good...
echopassfail '${arg:1}: x-privet-token ${arg:2}' 'pass'
log info '#Test result:                 pass'
return 'pass'
;
:CHECKINVALID.FAILSTS
echopassfail '${arg:1}: x-privet-token ${arg:2}' 'fail (http status not 400)'
log info '#Test result:                 fail (http status not 400)'
set xprivettokenerrorresult 'fail'
return 'fail'
;
:CHECKINVALID.FAILERROR
echopassfail '${arg:1}: x-privet-token ${arg:2}' 'fail (error not invalid_x_privet_token)'
log info '#Test result:                 fail (error not invalid_x_privet_token)'
set xprivettokenerrorresult 'fail'
return 'fail'
;
:CHECKINVALID.FAILDESCRIPTION
echopassfail '${arg:1}: x-privet-token ${arg:2}' 'fail (error bad description)'
log info '#Test result:                 fail (error bad description)'
set xprivettokenerrorresult 'fail'
return 'fail'
