;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Check Property v1.0 17-Jul-2017
; Check that the specified JSON property passes the test(s). If the
; property is the only thing specified, we just check if it exists.
; If an if-statement operator is included, then we also check it
; against one or more values...
;
; Arguments
; arg:1 - title for this test
; arg:2 - [REF] status (only set to fail, if needed)
; arg:3 - property to check
; arg:4 - if-statement operation to perform
; arg:5 - first item to check against the operation
; arg:n - arguments repeat as needed
;
; Locals
; checkproperty.aa - argument counter
;
; returns pass or fail
;
; Log it to make it easier to diagnose stuff...
log info '#'
log info '#Test:                        ${arg:1}'
log info '#Property:                    ${arg:3}'
;
; Dump the arguments (if any)...
set checkmissing.ii 1
set checkmissing.aa 4
:MAIN.ARGLOOP
	if '${arg:${get:checkmissing.aa}}' == '' goto MAIN.ARGDONE
	log info '#arg-${get:checkmissing.ii}:                       ${arg:${get:checkmissing.aa}}'
	increment checkmissing.ii '${get:checkmissing.ii}' 1
	increment checkmissing.aa '${get:checkmissing.aa}' 1
	goto MAIN.ARGLOOP
:MAIN.ARGDONE
;
; Make sure the property exists...
if '${rjx:${arg:3}}' == '(null)' goto CHECK.MISSING
;
; if we have no operator, we're done...
if '${arg:4}' == '' goto CHECK.PASS
;
; Do the if-statement (init at 3, we'll start at 4), we are
; successful if we find an item, unsuccessful if we exhaust
; the list without finding a match...
set checkproperty.aa 3
:CHECK.NEXTIF
	increment checkproperty.aa ${get:checkproperty.aa} 1
	if '${get:checkproperty.aa}' > '${arg:#}' goto CHECK.FAILEDIF
	if '${rj:${arg:3}}' '${arg:4}' '${arg:${get:checkproperty.aa}}' goto CHECK.PASS
	goto CHECK.NEXTIF
;
; An if-statement failed...
:CHECK.FAILEDIF
echopassfail '${arg:1}: check ${arg:3}' 'fail (if <${rj:${arg:3}}> ${arg:4} <${arg:${get:checkproperty.aa}}>)'
log info '#Test result:                 fail (if <${rj:${arg:3}}> ${arg:4} <${arg:${get:checkproperty.aa}}>)'
set '${arg:2}' 'fail'
return 'fail'
;
; The property is missing...
:CHECK.MISSING
echopassfail '${arg:1}: ${arg:3}' 'fail (${arg:3} missing)'
log info '#Test result:                 fail (${arg:3} missing)'
set '${arg:2}' 'fail'
return 'fail'
;
; We're good...
:CHECK.PASS
echopassfail '${arg:1}: ${arg:3}' 'pass'
log info '#Test result:                 pass'
return 'pass'
